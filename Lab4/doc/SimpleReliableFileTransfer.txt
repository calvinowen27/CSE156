Lab 3 (Simple Reliable File Transfer)
By: Calvin Owen 1884240


Description:
-------------
This lab implements a client and server that can reliably transfer files between them using UDP. It does this using the Go-Back-N 
sliding window protocol for packets. 

Usage:
-------
First, make sure to build the myclient and myserver executables using the `make` command. This will build the executables 
to the bin/ directory.
In the same directory as the myclient and myserver executable, you can run the applications with their respective commands:

`./myserver [port] [droppc]`
`./myclient [Server IPv4 address] [port] [UDP datagram mss] [window size] [input file path] [output file path]`

Note: the server must be up and running before the client attempts to connect to it.

The server will start and will wait for UDP datagrams sent to the specified port.
The UDP datagram mss is the size of the datagrams that will be sent to the server. The minimum size is 14, but 1024-4096 is 
recommended.

Here are example commands with all of the arguments filled in:

`./myserver 9090 5`
`./myclient 127.0.0.1 9090 1024 10 in/directory/file.txt out/directory/file.txt`

Implementation/Protocol:
----------------
The client initiates a connection with the server using a 3-way handshake protocol. The server will respond with the id the client 
should use for future transmissions. The client can then send packets containing file data to the server, where each one should 
be received by the server and written to the output file. The output file path is sent to the server in the initial packet sent 
from the client. When a packet is received out of order/when it isn't expected, the server sends an acknowledgment for the most 
recent correct packet. The client will resend a window starting from the next needed packet when it receives this transmission. 
When the end of the file is reached, the client will send a packet with a payload size of 0. The server can recognize this and 
terminate the conneciton with the client using another, similar, 3-way handshake protocol. If at any time the server goes down 
during a connection, the client will continue to try to connect until it reaches the maximum number of retransmissions allowed or 
it times out.


src Files:
-----------
myclient.c - C file implementing the main functionality of the client

myclient.h - Header file defining prototype functions for myclient.c

myserver.c - C file implementing the main functionality of the file transfer server

myserver.h - Header file defining prototype functions for myserver.c

utils.c - C file implementing utility functions to be used in myclient.c, myserver.c

utils.h - Header file defining prototype functions for utils.h


Test Cases
-----------
test_bad_inputs.sh - test myclient for bad inputs to see how it responds. expect exit with failure code.

test_high_drops.sh - test client response to server with high drop rate. expect it to exit with too many retransmissions.

test_multiple_clients.sh - test myserver to see if it can handle packets from multiple clients. expect unique files to be created and replicated correctly.

test_normal.sh - test myclient and myserver with normal valid inputs, confirm that file transfer happens safely and reliably.

test_server_crash.sh - test client reaction to a crashed server. expect it to exit with too many retransmissions or inability to detect server.



Shortcomings:
--------------
The client cannot detect when the server is down without detecting a lack of ACKs coming from the server. That is, it will continue 
trying to send packets until it has resent the same packets >3 times. The server cannot have multiple clients writing to the same 
file at the same time. The server is not multithreaded, so its processing speed is limited. 
