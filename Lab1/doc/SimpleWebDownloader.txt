Simple Web Downloader Documentation
By: Calvin Owen 1884240


Description:
-------------
The myweb program developed for Lab1: Simple Web Downloader downloads the specified file from the given url and ip using
an HTTP request, and saves the contents to the file output.dat in the same directory. Alternatively, the -h flag can be 
used to omit the downloading of the requested file, and instead print the header of the HTTP response to stdout.


Usage:
-------
First, make sure to build the myweb executable using the `make` command. This will build the myweb executable to the 
bin/ directory.
In the same directory as the myweb executable, you ran run the application with the following command:

`./myweb [url] [Server IPv4 address]:[optional port]/[file path to request] [-h (optional)]

The default port used is 80, and the connection will likely time out for any other port.
Here is an example command with all of the argument filled in:

`./myweb www.example.com 93.184.216.24:80/index.html`


Implementation:
----------------
The internal implementation of the myweb app functions as follows:
- Parse command line arguments
- Open socket and establish connection to server using the IP address and Port using the TCP protocol
- Create and HTTP Request using the specified arguments, and send it to the server
- Listen for the server HTTP response
- Parse response, looking for Content-Length and Transfer-Encoding header fields
- Write content of server response to output.dat file, unless -h flag given in command
	- If -h flag was given, write the header of the response to stdout
- Close the connection
- Close all files that were opened
- Free all memory


Test Cases:
------------
I wrote 5 test scripts that test each element of the functionality of the application.

test_bad_ip.sh	 - 	test myweb app with an invalid ip address and invalid ports
test_403.sh		 -  test myweb app with a request to a forbidden resource, to make sure output is consistent
test_chunked.sh  - 	test whether or not 'Transfer-Encoding: chunked' header field is supported
test_example.sh  - 	test reasonable commands for multiple websites to make sure outputs match 
					with expected result from equivalent curl command
test_header.sh	 - 	test the -h flag for the myweb, which should output the response header to 
					stdout, checks for match with equivalent curl command


Shortcomings:
--------------
There are several shortcomings to this implementation of the simple web downloader app. The first and most obvious being 
that it does not support chunked transfer encoding, so if the content of a webpage doesn't fit within a single packet, 
it cannot be downloaded. The app also requires the user know the ip of the server that the webpage is hosted, which is 
inconvenient to say the least. It also only offers two modes of use: a regular download and a header examination tool,
which is not very useful for most users. Additionally, if a response is received that has no Content-Length header field 
and no Transfer-Encoding header field, the app will continue waiting for data from the server until the server closes 
the connection.
